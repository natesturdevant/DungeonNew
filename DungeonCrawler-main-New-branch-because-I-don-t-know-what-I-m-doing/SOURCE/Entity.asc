import Entity Combatants[8];

//Entity Ghost;

//function setEnemyViews()
//{
//  Ghost.attackView = 5;
//}

String Entity::GetStringHPSP()
{
	return String.Format("HP: %d/%d[SP: %d/%d", this.stats.health, this.stats.maxHealth, this.stats.mana, this.stats.maxMana);
}

void Entity::Initialize(String name, int level)
{
	this.stats = new Stats;
	// Initialize entity i.e. remove equipment, reset stats to 1 each.
	this.name = name;
	
	this.level = level;
	this.currentExp = 0;
	this.maxExp = 100;
	
	this.stats.Initialize();
	this.stats.speed = level;
	this.isInitialized = true;
	this.combatTimer = 0;
  
  Enemy_1.Animate(VGHOSTANIMATION, 0, 5, eOnce, eNoBlock, eForwards, 0);
  Enemy_2.Animate(VGHOSTANIMATION, 0, 5, eOnce, eNoBlock, eForwards, 0);
  Enemy_3.Animate(VGHOSTANIMATION, 0, 5, eOnce, eNoBlock, eForwards, 0);
  Enemy_4.Animate(VGHOSTANIMATION, 0, 5, eOnce, eNoBlock, eForwards, 0);
}

void Entity::TakeDamage(int damage)
{
  if (this.isPlayerControlled){
    ShakeScreenBackground(2, 2, 10);
    Wait(10);
  }
  
  switch (this.name){
    case "Enemy_1":
      Enemy_1.Y+=3;
      Wait(10); 
      Enemy_1.Animate(VGHOSTTAKESDAMAGE, 0, 3, eOnce, eBlock);
      Enemy_1.Y-=3;
      break;
      
    case "Enemy_2":
      Enemy_2.Y+=3;
      Wait(10); 
      Enemy_2.Animate(VGHOSTTAKESDAMAGE, 0, 3, eOnce, eBlock);
      Enemy_2.Y-=3;
      break;
      
    case "Enemy_3":
      Enemy_3.Y+=3;
      Wait(10);  
      Enemy_3.Animate(VGHOSTTAKESDAMAGE, 0, 3, eOnce, eBlock);
      Enemy_3.Y-=3;
      break;
      
    case "Enemy_4":
      Enemy_4.Y+=3;
      Wait(10);
      Enemy_4.Animate(VGHOSTTAKESDAMAGE, 0, 3, eOnce, eBlock);
      Enemy_4.Y-=3;
      break;
  }
  
  
	this.stats.health -= damage;
  
  if ((this.stats.health <= 0)&&(!this.isPlayerControlled)){ //animates the death
    switch (this.name){
      case "Enemy_1":
      Enemy_1.Y+=3;
      Wait(10); 
      Enemy_1.Animate(VGHOSTDEATH, 0, 3, eOnce, eBlock);
      Enemy_1.Y-=3;
      break;
      
    case "Enemy_2":
      Enemy_2.Y+=3;
      Wait(10); 
      Enemy_2.Animate(VGHOSTDEATH, 0, 3, eOnce, eBlock);
      Enemy_2.Y-=3;
      break;
      
    case "Enemy_3":
      Enemy_3.Y+=3;
      Wait(10);  
      Enemy_3.Animate(VGHOSTDEATH, 0, 3, eOnce, eBlock);
      Enemy_3.Y-=3;
      break;
      
    case "Enemy_4":
      Enemy_4.Y+=3;
      Wait(10);
      Enemy_4.Animate(VGHOSTDEATH, 0, 3, eOnce, eBlock);
      Enemy_4.Y-=3;
      break;
    }
  }
 
	// if hp <= 0 then BattleManager.RemoveDeadEntity(this);
}

int Entity::GetDamage()
{
	return this.stats.baseDamage + this.stats.strength;  //atk * atk / (atk + def) is a formula I read somewhere.
}



void Entity::Attack(int targetSlot)
{
	int damage = this.GetDamage();
	// do math
  //damage scalar = atk * atk / (atk + def) I read this somewhere and wanted to make a note
  
  //setEnemyViews();
 

  if (this.name=="Enemy_1"){
    Enemy_1.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    Enemy_1.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    
  }
  
   if (this.name=="Enemy_2"){
    Enemy_2.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    Enemy_2.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    
  }
  
   if (this.name=="Enemy_3"){
    Enemy_3.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    Enemy_3.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    
  }
  
   if (this.name=="Enemy_4"){
    Enemy_4.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    Enemy_4.Animate(VGHOSTANIMATION, 0, 5, eOnce, eBlock);
    
  }
  

  
	Combatants[targetSlot].TakeDamage(damage);
	
	gInfoBarLabel.Text = String.Format("%s attacks %s for %d damage!", this.name, Combatants[targetSlot].name, damage);
  UpdateInfobar();
	
	// at the end progress the turn order
	
	// Check if battle is over before ending the turn as it might be unnecessary or cause issues.
}

void Entity::Defend()
{
	
}

void Entity::UseItem(int targetSlot)
{
	
}

void Entity::TryToFlee()
{
	
}
