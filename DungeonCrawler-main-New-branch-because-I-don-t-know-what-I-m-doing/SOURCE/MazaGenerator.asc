// new module script

void Log(String text)
{
	gTestLabel.Text = gTestLabel.Text.Append(text);
}

Maze maze;//Contains an array of rows
Row * rows[];//Each Row contains an array of Cells(struct with extra information)
Cell * cells[];//each cell contains few properties such as "x,y, visited and an array of corridors"

bool Row::isValid(int index)
{
	return index >= 0 && index < this.length;
}

bool Maze::isValid(int index)
{
	return index >= 0 && index < this.length;
}

static CellPosition* MazeGenerator::_FindRandomNeighbour(int cellIndex, bool isVisitedNeightbour)
{
	Point * possibleMovements[4];
	possibleMovements[0] = new Point;
	possibleMovements[0].x = -1;
	possibleMovements[0].y = 0;

	possibleMovements[1] = new Point;
	possibleMovements[1].x = 0;
	possibleMovements[1].y = -1;

	possibleMovements[2] = new Point;
	possibleMovements[2].x = 0;
	possibleMovements[2].y = 1;

	possibleMovements[3] = new Point;
	possibleMovements[3].x = 1;
	possibleMovements[3].y = 0;
	
	CellPosition * _availableNeighbours[4];//3 is max,  4 is possible in theory if we start inside the maze, but we don't. :)
	int countAvailableNeighbours = -1;
	
	Cell _cell = cells[cellIndex];
	
	//loop 0-3 because there are 4 possible directions when solving a maze. N/W/S/E
	//Log(String.Format("[[x:%d,y:%d; ", _cell.line, _cell.column));
	for(int i = 0; i < 4; i++)
	{
		int _index = _cell.line + possibleMovements[i].x;
		bool currentNeighbourExists = maze.isValid(_index);
		if(currentNeighbourExists)
		{
			int _x = _cell.line + possibleMovements[i].x;
			int _y = _cell.column + possibleMovements[i].y;
			Row _row = rows[maze.row[_x]];
			bool isValid = _row.isValid(_y);
			bool isValidPosition = false;
			
			if(isValid)
			{
				Cell __cell = cells[_row.cells[_y]]; // Can't use it, because we need to check if row exists first...
				isValidPosition =  __cell.visited == isVisitedNeightbour;
				//Log(String.Format("(%d,%d),(%d,%d) = %s/%s;", possibleMovements[i].x, possibleMovements[i].y, _x, _y, _cellVisited, _isVisitNeighbour));
			}
			
			
			if(!isValidPosition || !isValid) continue;
			
			//Log(String.Format("%d,%d; ", _x, _y));
			countAvailableNeighbours++;
			
			_availableNeighbours[countAvailableNeighbours] = new CellPosition;
			_availableNeighbours[countAvailableNeighbours].index = cells[_row.cells[_y]].index;
			_availableNeighbours[countAvailableNeighbours].x = _x;
			_availableNeighbours[countAvailableNeighbours].y = _y;
		}
	}
	//If no cell is found, return -1, -1
	if(countAvailableNeighbours < 0)
	{
		CellPosition *noPoint = new CellPosition;
		noPoint.x = -1;
		noPoint.y = -1;
		return noPoint;
	}
	int randomIndex = Random(countAvailableNeighbours);
	//return Point with x, y of a cell.
	return _availableNeighbours[randomIndex];
}

static void MazeGenerator::_CreateEmptyCellsConnections(int cellLine, int cellColumn)
{
	while(true)
	{
		// _CreateEmptyCellsConnections
		Row _row = rows[maze.row[cellLine]];
		Cell _cell = cells[_row.cells[cellColumn]];
		
		_cell.visited = true;
		
		CellPosition *_nextCell = MazeGenerator._FindRandomNeighbour(_cell.index);
	
		if(_nextCell != null && _nextCell.x >= 0 && _nextCell.y >= 0)
		{
			_cell.corridors[_cell.currentCorridorIndex] = _nextCell.index;
			_cell.currentCorridorIndex++;
			cellLine = _nextCell.x;
			cellColumn = _nextCell.y;
			continue;
		}
		
		// SEARCH ROW BY ROW FOR AN EMPTY CELL THEN CONTINUE
		//MazeGenerator._FindAndConnectEmptyCells();
		
		//reset cell/column so we can search row by row until we find a cell that has not been visited yet.
		cellLine = 0;
		cellColumn = 0;
		bool doBreak = false;
		
		
		while(true)
		{
			if(cellLine >= maze.length - 1 && cellColumn >= maze.length -1)
			{
				doBreak = true;
				break;
			}
			
			_row = rows[maze.row[cellLine]];
			_cell = cells[_row.cells[cellColumn]];
			
			if(_cell.visited)
			{
				if(cellColumn >= maze.length - 1)
				{
					cellLine++;
					cellColumn = 0;
					continue;
				}
				cellColumn++;
				continue;
			}
			
			_nextCell = MazeGenerator._FindRandomNeighbour(_cell.index, true);
			if(_nextCell != null && _nextCell.x >= 0 && _nextCell.y >= 0)
			{
				_cell.corridors[_cell.currentCorridorIndex] = _nextCell.index;
				_cell.currentCorridorIndex++;
				cellLine = _nextCell.x;
				cellColumn = _nextCell.y;
				break;
			}
			else
			{
				doBreak = true;
				break;
			}
		}
		
		if(doBreak) break;
	}
}

String mazeFilePath;

static void MazeGenerator::_CreateMaze(int dimensions, String filePath)
{
	mazeFilePath = filePath;
	//TODO: First clear out old maze
	cells = new Cell[dimensions*dimensions];
	rows = new Row[dimensions];
	maze.row = new int[dimensions];
	maze.length = dimensions;
	
	for(int i = 0; i < dimensions; i++)
	{
		rows[i] = new Row;
		rows[i].length = dimensions;
		rows[i].cells = new int[dimensions];
		maze.row[i] = i;
		for(int j = 0; j < dimensions; j++)
		{
			int cellIndex = (i * dimensions) + j;
			rows[i].cells[j] = cellIndex;
			
			cells[cellIndex] = new Cell;
			cells[cellIndex].index = cellIndex;
			cells[cellIndex].line = i;
			cells[cellIndex].column = j;
			for(int k = 0; k < 100; k++)
			{
				cells[cellIndex].corridors[k] = -1;
			}
		}
	}
	MazeGenerator._CreateEmptyCellsConnections();
	
	MazeGenerator._CreateMap(dimensions);
}

String mapChars;
static void MazeGenerator::_CreateMap(int dimensions)
{
	char wallTile = '#';
	char floorTile = ' ';
	char entranceTile = 'E';
	char exitTile = 'H';
	char torch = 'X';
	
	String map[] = new String[maze.length * 2 + 1];
	
	for(int i = 0; i < maze.length * 2 + 1; i++)
	{
		String mapChars = "";
		for(int j = 0; j < maze.length * 2 + 1; j++)
		{
			if(i % 3 == 0 && j % 3 == 0) mapChars = mapChars.AppendChar(torch);
			else mapChars = mapChars.AppendChar(wallTile);
		}
		map[i] = mapChars;
	}
	for(int line = 0; line < dimensions; line++)
	{
		for(int column = 0; column < dimensions; column++)
		{
			Row _row = rows[maze.row[line]];
			Cell _cell = cells[_row.cells[column]];
			
			if(_cell.visited)
			{
				map[line * 2 + 1] = map[line * 2 + 1].ReplaceCharAt(column * 2 + 1, floorTile);
				
				for(int corridor = 0; corridor < _cell.currentCorridorIndex; corridor++)
				{
					Cell _corridorCell = cells[_cell.corridors[corridor]];
					
					if(_corridorCell.line > _cell.line)
					{
						map[line * 2 + 2] = map[line * 2 + 2].ReplaceCharAt(column * 2 + 1, floorTile);
					}
					else if(_corridorCell.line < _cell.line)
					{
						map[line * 2] = map[line * 2].ReplaceCharAt(column * 2 + 1, floorTile);
					}
					else if(_corridorCell.column > _cell.column)
					{
						map[line * 2 + 1] = map[line * 2 + 1].ReplaceCharAt(column * 2 + 2, floorTile);
					}
					else if(_corridorCell.column < _cell.column)
					{
						map[line * 2 + 1] = map[line * 2 + 1].ReplaceCharAt(column * 2, floorTile);
					}
				}
			}
		}
	}

	/* ADD RANDOM ROOM TO THE MAZE
	
	>>> WORK IN PROGRESS, MIGHT CRASH THE GAME <<<
	
	int randomX = Random(maze.length * 2 + 1 - 4) + 2;
	int randomY = Random(maze.length * 2 + 1 - 4) + 2;
	int randomSize = Random(2) + 3;
	for(int line = randomX; line < randomX + randomSize; line++)
	{
		String mapChars = "";
		for(int column = randomY; column < randomY + randomSize; column++)
		{
			map[line] = map[line].ReplaceCharAt(column, floorTile);
		}
	}
	*/
	for(int line = 0; line < maze.length * 2 + 1; line++)
	{
		mapChars = "";
		for(int column = 0; column < maze.length * 2 + 1; column++)
		{
			mapChars = mapChars.AppendChar(map[line].Chars[column]);
		}
		gTestLabel.Text = gTestLabel.Text.Append(mapChars);
		gTestLabel.Text = gTestLabel.Text.Append("[");
	}
	
	
	
	
	File *input = File.Open(mazeFilePath, eFileWrite);
	
	for(int line = 0; line < maze.length * 2 + 1; line++)
	{
		mapChars = "";
		for(int column = 0; column < maze.length * 2 + 1; column++)
		{
			/*
			// Add exit to the map at the south
			if(column == maze.length && (line == maze.length * 2 || line == maze.length * 2 - 1))
			{
				if(line == maze.length * 2) mapChars = mapChars.AppendChar(exitTile);
				else mapChars = mapChars.AppendChar(floorTile);
			}
			
			// Add Entrance to the maze at the north
			else if (column == maze.length && (line == 0 || line == 1))
			{
				if(line == 0) mapChars = mapChars.AppendChar(entranceTile);
				else mapChars = mapChars.AppendChar(floorTile);
			}
			
			//if(line == maze.length + 1) mapChars = mapChars.AppendChar('Q');
			else
			{
				mapChars = mapChars.AppendChar(map[line].Chars[column]);
			}
			*/
			mapChars = mapChars.AppendChar(map[line].Chars[column]);
		}
		input.WriteRawLine(mapChars);
	}
	input.Close();
	
}


void on_event (EventType event, int data)
{
	if(event == eEventEnterRoomAfterFadein)
	{
		//MazeGenerator._CreateMaze(10, "$APPDATADIR$/auto-generated-maze.txt");
	}
}

function game_start()
{	

}