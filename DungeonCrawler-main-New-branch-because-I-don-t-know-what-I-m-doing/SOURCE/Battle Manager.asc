Entity Combatants[8];//0-3 player, 4-7 enemies
export Combatants;
BattleManager battleManager;



static void BattleManager::EndCombat()
{
	gCombatButtons.Visible = false;
	gTurnOrder.Visible = false;
	gHeroes.Visible = false;
	gInfoBar.Visible = false;
	inCombat = false;
	
	// Show dropped items list, exp gained, level ups, play winning sfx etc.
}

static void BattleManager::TryToFlee()
{
	if(Random(10) > 5)
	{
		BattleManager.EndCombat();
	}
	else
	{
		gInfoBarLabel.Text = "You tried to flee, but failed";
    UpdateInfobar();
		BattleManager.EndTurn();
	}
}

static void BattleManager::Rest()
{
	int maxHp = Combatants[battleManager.turnOrder[0]].stats.maxHealth;
	float healing = IntToFloat(maxHp) * 0.2;
	
	Combatants[battleManager.turnOrder[0]].stats.health += FloatToInt(healing);
	
	if(Combatants[battleManager.turnOrder[0]].stats.health > Combatants[battleManager.turnOrder[0]].stats.maxHealth)
	{
		Combatants[battleManager.turnOrder[0]].stats.health = Combatants[battleManager.turnOrder[0]].stats.maxHealth;
	}
	gInfoBarLabel.Text = String.Format("%s healed for %d", Combatants[battleManager.turnOrder[0]].name, FloatToInt(healing));
	UpdateInfobar();
	BattleManager.EndTurn();
}

static void BattleManager::SetupTurnOrder()
{	
	bool foundIndexes[8];
	int iterations = 0;
	
	for(int j = 0; j < 8; j++)
	{
		battleManager.turnOrder[j] = -1;
		if(!Combatants[j].isInitialized || Combatants[j].stats.health <= 0) continue;
		else iterations++; //count how many alive/active entities there are before we calculate turn order.
	}
	
	int lastIndexFound = 0;
	int highestSpeedIndex = 0;
	
	// Setup turn order
	while(iterations > 0)
	{
		int lastHighestSpeed = 0;
		for(int index = 0; index < 8; index++)
		{
			int speed = Combatants[index].combatTimer;
			String name = Combatants[index].name;
			
			if(!Combatants[index].isInitialized || Combatants[index].stats.health <= 0) continue; // dead or not initialized entity
			else if(foundIndexes[index]) continue; // already found this index, so we ignore it.
			
			else if(speed >= lastHighestSpeed)
			{
				highestSpeedIndex = index;
				lastHighestSpeed = speed;
			}
		}
		
		if(!foundIndexes[highestSpeedIndex])
		{
			foundIndexes[highestSpeedIndex] = true;
			battleManager.turnOrder[lastIndexFound] = highestSpeedIndex;
			lastIndexFound++;
		}
		
		iterations--;
	}
	
	// Draws turn order on the screen
	for(int k = 0; k < 8; k++)
	{
		if(battleManager.turnOrder[k] >= 0)
		{
			gTurnOrder.Controls[k].AsButton.Text = Combatants[battleManager.turnOrder[k]].name;
			gTurnOrder.Controls[k].AsButton.Text = gTurnOrder.Controls[k].AsButton.Text.Append(String.Format("== HP: %d",  Combatants[battleManager.turnOrder[k]].stats.health));
			
			gTurnOrder.Controls[k].Visible = true;
		}
		else
		{
			gTurnOrder.Controls[k].Visible = false;
		}
	
	}
	
	// Check if current character is NPC, then attack random hero
	if(!Combatants[battleManager.turnOrder[0]].isPlayerControlled)
	{
		int aliveHeroes[4];
		int count = -1;
		for(int i = 0; i < 4; i++)
		{
			if(Combatants[i].isInitialized && Combatants[i].stats.health > 0)
			{
				count++;
				aliveHeroes[count] = i;
			}
		}
		if(count < 0)
		{
			// all heroes are dead.
		}
		else
		{
			BattleManager.Attack(aliveHeroes[Random(count)]);
		}
	}
}

static void BattleManager::SetPlayerStartTurn()
{
	// Make sure player heroes start first when the combat starts.
	int timer = 8;
	for(int i = 0; i < 8; i++)
	{
		Combatants[i].combatTimer = timer;
		timer--;
	}
}

static void BattleManager::ShowCombatSpeed(int index)
{
	// debug
	Display(String.Format("%s: Combat Timer: %d", Combatants[battleManager.turnOrder[index]].name, Combatants[battleManager.turnOrder[index]].combatTimer));
}

static void BattleManager::StartCombat(int enemyCount)
{
	gInfoBarLabel.Text = "Four monsters appears before you!";
  UpdateInfobar();
	for(int i = 0; i < 4; i++)
	{
		Combatants[i].stats.health = Combatants[i].stats.maxHealth;
		
		// Restore mana too?
		//Combatants[i].stats.mana = Combatants[i].stats.maxMana;
	}
	
	// Setup enemies
	Combatants[4].Initialize("Enemy_1", 2);
	Combatants[5].Initialize("Enemy_2", 8);
	Combatants[6].Initialize("Enemy_3", 4);
	Combatants[7].Initialize("Enemy_4", 3);
	
	Enemy_1.Visible = true;
	Enemy_2.Visible = true;
	Enemy_3.Visible = true;
	Enemy_4.Visible = true;
	
	gCombatButtons.Visible = true;
	gTurnOrder.Visible = true;
	gHeroes.Visible = true;
	gInfoBar.Visible = true;
	
	BattleManager.SetPlayerStartTurn();
	
	BattleManager.SetupTurnOrder();
	
	int firstTarget = 0;
	
	for(int i = 4; i < 8; i++)
	{
		if(Combatants[i].isInitialized)
		{
			firstTarget	= i;
			break;
		}
	}
	BattleManager.SelectTarget(firstTarget);
	
	BattleManager.UpdateUI();
}

static int BattleManager::GetSelectedTarget()
{
	return battleManager.selectedTarget;
}

static void BattleManager::Attack(int targetIndex)
{	
	Combatants[battleManager.turnOrder[0]].Attack(targetIndex);
	
	BattleManager.UpdateUI();
	
	//int damage = Combatants[battleManager.turnOrder[0]].GetDamage();
	//Combatants[targetIndex].TakeDamage(damage);
	
	if(Combatants[targetIndex].stats.health <= 0)
	{
		// kill enemy
		if(targetIndex == 4) Enemy_1.Visible = false;
		if(targetIndex == 5) Enemy_2.Visible = false;
		if(targetIndex == 6) Enemy_3.Visible = false;
		if(targetIndex == 7) Enemy_4.Visible = false;
		
		if(targetIndex > 3)
		{
			// enemy killed, select new target with a selector
			for(int i = 4; i < 8; i++)
			{
				if(Combatants[i].stats.health > 0 && Combatants[i].isInitialized)
				{
					BattleManager.SelectTarget(i);
					break;
				}
			}
		}
		
		// kill player
		//if(targetIndex == 0) Enemy_4.Visible = false;
		//if(targetIndex == 1) Enemy_4.Visible = false;
		//if(targetIndex == 2) Enemy_4.Visible = false;
		//if(targetIndex == 3) Enemy_4.Visible = false;
		
		
	}
	
	// Check if all enemies or players are dead.
	
	bool enemyIsAlive = false;
	bool playerIsAlive = false;
	
	for(int i = 0; i < 4; i++)
	{
		if(Combatants[i].stats.health > 0 && Combatants[i].isInitialized) playerIsAlive = true;
		if(Combatants[i + 4].stats.health > 0 && Combatants[i + 4].isInitialized) enemyIsAlive = true;
	}
	
	// players or enemies are all dead.
	if(!playerIsAlive || !enemyIsAlive)
	{	
		BattleManager.EndCombat();
		return;
	}
	
	// deal damage,
	// check if all enemies are dead to end the battle
	// if not then change combat timer of the current attacker based on its speed + update turn order
	
	BattleManager.EndTurn();
}

static void BattleManager::EndTurn()
{
	Combatants[battleManager.turnOrder[0]].combatTimer = 0;
	
	// Move combat timer for other units until one has reached 100;
	bool isFound = false;
	while(!isFound)
	{
		for(int i = 0; i < 8; i++)
		{
			Combatants[i].combatTimer += Combatants[i].stats.speed;
			if(Combatants[i].combatTimer >= 100) isFound = true;
		}
	}
	
	BattleManager.SetupTurnOrder();
}

static void BattleManager::SelectTarget(int targetSlot)
{
	// 3 + targetSlot since 0-3 are taken by player characters. and target slots are 1-4 so we get 4-7 from the array.
	battleManager.selectedTarget = targetSlot;
	
	gSelector_1.Visible = false;
	gSelector_2.Visible = false;
	gSelector_3.Visible = false;
	gSelector_4.Visible = false;
	
	if(targetSlot == 4) gSelector_1.Visible = true;
	if(targetSlot == 5) gSelector_2.Visible = true;
	if(targetSlot == 6) gSelector_3.Visible = true;
	if(targetSlot == 7) gSelector_4.Visible = true;
	
}

static void BattleManager::UpdateUI()
{
	
	gHero_1_Name.Text = Combatants[0].name;
	gHero_2_Name.Text = Combatants[1].name;
	gHero_3_Name.Text = Combatants[2].name;
	gHero_4_Name.Text = Combatants[3].name;
	
	gHero_1_HPSP.Text = Combatants[0].GetStringHPSP();
	gHero_2_HPSP.Text = Combatants[1].GetStringHPSP();
	gHero_3_HPSP.Text = Combatants[2].GetStringHPSP();
	gHero_4_HPSP.Text = Combatants[3].GetStringHPSP();
}

function game_start()
{
	Combatants[0].Initialize("Hero_1", 1);
	Combatants[0].stats.SetStats(20, 10, 5, 3, 10, 3, 5);
	Combatants[1].Initialize("Hero_2", 3);
	Combatants[2].Initialize("Hero_3", 2);
	Combatants[3].Initialize("Hero_4", 5);
	
	// Set 4 player controlled characters.
	for(int j = 0; j < 4; j++)
	{
		Combatants[j].isPlayerControlled = true;
	}
	
	for(int i = 0; i < gTurnOrder.ControlCount; i++)
	{
		gTurnOrder.Controls[i].AsButton.SetPosition(0, i * 30);
	}
}


